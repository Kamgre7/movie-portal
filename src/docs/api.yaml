openapi: 3.0.0
info:
  title: Movie portal - Swagger OpenAPI
  description: This is CRUD API made with Express and documented with Swagger
  termsOfService: http://swagger.io/terms/
servers:
  - url: ${HOST}:${PORT}
tags:
  - name: auth
    description: Auth login/logout
  - name: actor
    description: Everything about actors
  - name: movie
    description: Everything about movies
  - name: user
    description: Everything about users
paths:
  /auth/login:
    post:
      tags:
        - auth
      summary: Log in
      description: User log in
      operationId: LogIn
      requestBody:
        description: User information
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequestBody'
      responses:
        '201':
          description: Successful operation - user logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /auth/logout:
    delete:
      security:
        - bearerAuth: []
      tags:
        - auth
      summary: Log out
      description: User log out
      operationId: LogOut
      responses:
        '204':
          description: Successful operation - user logged out
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /auth/token/refresh:
    post:
      security:
        - bearerAuth: []
      tags:
        - auth
      summary: Refresh user refresh token
      description: Refresh user refresh token
      operationId: refreshToken
      requestBody:
        description: Body have to include refresh token
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequestBody'
      responses:
        '201':
          description: Successful operation - token refreshed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshTokenResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /actors:
    post:
      security:
        - bearerAuth: []
      tags:
        - actor
      summary: Add new actor
      description: Add new actor
      operationId: AddActor
      requestBody:
        description: Actor information
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddActorRequestBody'
      responses:
        '201':
          description: Successful operation - actor created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Actor'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  /actors/{actorId}/rate/movies/${movieId}:
    post:
      security:
        - bearerAuth: []
      tags:
        - actor
      summary: Rate actor
      description: Rate actor
      operationId: RateActor
      parameters:
        - $ref: '#/components/parameters/ActorIdParam'
        - $ref: '#/components/parameters/MovieIdParam'
      requestBody:
        description: Actor rate
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActorRatingRequestBody'
      responses:
        '201':
          description: Successful operation - actor rated by user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActorRating'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    patch:
      security:
        - bearerAuth: []
      tags:
        - actor
      summary: Update actor rating
      description: Update actor rating
      operationId: UpdateActorRating
      parameters:
        - $ref: '#/components/parameters/ActorIdParam'
        - $ref: '#/components/parameters/MovieIdParam'
      requestBody:
        description: Actor rate
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActorRatingRequestBody'
      responses:
        '204':
          description: Successful operation - actor rating updated
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /actors/search:
    get:
      tags:
        - actor
      summary: Get actors by criteria
      description: Get all actors by criteria
      operationId: GetActorsByCriteria
      parameters:
        - $ref: '#/components/parameters/ActorFirstNameParam'
        - $ref: '#/components/parameters/ActorLastNameParam'
        - $ref: '#/components/parameters/WithRatingParam'
      responses:
        '200':
          description: Success operation - return array with actors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActorWithRating'
        '400':
          $ref: '#/components/responses/BadRequestError'
  /actors/{id}:
    get:
      tags:
        - actor
      summary: Get actor
      description: Get actor by ID
      operationId: GetActor
      parameters:
        - $ref: '#/components/parameters/ActorIdParams'
        - $ref: '#/components/parameters/WithRatingParam'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActorWithRating'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /movies:
    post:
      security:
        - bearerAuth: []
      tags:
        - movie
      summary: Add new movie
      description: Add new movie
      operationId: AddMovie
      requestBody:
        description: Movie information
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddMovieRequestBody'
      responses:
        '201':
          description: Successful operation - movie created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    BadRequestError:
      description: Bad request - invalid data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFoundError:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ForbiddenError:
      description: Access forbidden - need to be admin
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  parameters:
    ActorIdParams:
      name: id
      in: path
      description: The ID of the actor
      required: true
      schema:
        $ref: '#/components/schemas/ActorIdProperty'
    ActorIdParam:
      name: actorId
      in: path
      description: The ID of the actor
      required: true
      schema:
        $ref: '#/components/schemas/ActorIdProperty'
    MovieIdParam:
      name: movieId
      in: path
      description: The ID of the movie
      required: true
      schema:
        $ref: '#/components/schemas/MovieIdProperty'
    ActorFirstNameParam:
      name: firstName
      in: query
      description: first name of actor
      required: false
      schema:
        $ref: '#/components/schemas/ActorFirstNameProperty'
    ActorLastNameParam:
      name: lastName
      in: query
      description: last name of actor
      required: false
      schema:
        $ref: '#/components/schemas/ActorLastNameProperty'
    WithRatingParam:
      name: withRating
      in: query
      description: find actor with ratings in movies
      required: false
      schema:
        $ref: '#/components/schemas/WithRatingProperty'
  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
    EmailProperty:
      type: string
      format: email
      example: john@example.com
    PwdProperty:
      type: string
      minLength: 3
      example: userPwd123$%
      description: Minimum eight characters, at least one uppercase, one lowercase character, one number and one special character
    AccessTokenProperty:
      type: string
      example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY2Y2E1Y2YzLTY5ZTAtNDBjYi04NjMzLTZiYzNmMGY1YjgzYiIsImVtYWlsIjoiYWRtaW5AZ21haWwuY29tIiwicm9sZSI6ImFkbWluIiwiaWF0IjoxNzAyODUzNjM1LCJleHAiOjE3MDI5NDAwMzV9.S_M5XBbzN1ZDilk51sT9108DqLgO-lv6kLIja-YT2cM
    RefreshTokenProperty:
      type: string
      example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY2Y2E1Y2YzLTY5ZTAtNDBjYi04NjMzLTZiYzNmMGY1YjgzYiIsImVtYWlsIjoiYWRtaW5AZ21haWwuY29tIiwicm9sZSI6ImFkbWluIiwiaWF0IjoxNzAyODUzNjM1LCJleHAiOjE3MDMyODU2MzV9.WtRkgvh7b7pBs6hymXZHxYDYA7GKOSSQfX0vUKKP1x8
    ActorFirstNameProperty:
      type: string
      minLength: 3
      example: Joe
    ActorLastNameProperty:
      type: string
      minLength: 3
      example: Doe
    GenderProperty:
      type: string
      enum:
        - male
        - female
      example: male
    RatingProperty:
      type: integer
      minimum: 1
      maximum: 5
      example: 3
    WithRatingProperty:
      type: boolean
      example: true
    MovieTitleProperty:
      type: string
      minLength: 2
      example: Nemo
    MovieCategoryProperty:
      type: string
      enum:
        - action
        - comedy
        - drama
        - fantasy
        - thriller
      example: fantasy
    MovieReleaseDateProperty:
      format: date-time
      example: '2000-01-01T12:00:00Z'
    CreatedAtProperty:
      type: string
      format: date-time
      example: '2022-01-01T12:00:00Z'
    UpdatedAtProperty:
      type: string
      format: date-time
      example: '2022-05-01T12:00:00Z'
    DeletedAtProperty:
      type: string
      format: date-time
      nullable: true
      example: null
    UserIdProperty:
      type: string
      format: uuid
      example: 82a99346-3227-41a1-beb0-1bdfd7c00351
    MovieIdProperty:
      type: string
      format: uuid
      example: 4953bb39-72d1-4497-b9b2-fbb29a0252ae
    ActorIdProperty:
      type: string
      format: uuid
      example: aa403449-20d8-4350-8847-9acea256c260
    LoginRequestBody:
      type: object
      required:
        - email
        - password
      properties:
        email:
          $ref: '#/components/schemas/EmailProperty'
        password:
          $ref: '#/components/schemas/PwdProperty'
    LoginResponse:
      type: object
      properties:
        accessToken:
          $ref: '#/components/schemas/AccessTokenProperty'
        refreshToken:
          $ref: '#/components/schemas/RefreshTokenProperty'
    RefreshTokenRequestBody:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          $ref: '#/components/schemas/RefreshTokenProperty'
    RefreshTokenResponse:
      type: object
      properties:
        token:
          $ref: '#/components/schemas/AccessTokenProperty'
    AddActorRequestBody:
      type: object
      required:
        - firstName
        - lastName
        - gender
      properties:
        firstName:
          $ref: '#/components/schemas/ActorFirstNameProperty'
        lastName:
          $ref: '#/components/schemas/ActorLastNameProperty'
        gender:
          $ref: '#/components/schemas/GenderProperty'
    ActorRatingRequestBody:
      type: object
      required:
        - rating
      properties:
        rating:
          $ref: '#/components/schemas/RatingProperty'
    AddMovieRequestBody:
      type: object
      required:
        - title
        - category
        - releaseDate
      properties:
        title:
          $ref: '#/components/schemas/MovieTitleProperty'
        category:
          $ref: '#/components/schemas/MovieCategoryProperty'
        releaseDate:
          $ref: '#/components/schemas/MovieReleaseDateProperty'
    ActorRating:
      type: object
      required:
        - userId
        - movieId
        - rating
      properties:
        userId:
          $ref: '#/components/schemas/UserIdProperty'
        movieId:
          $ref: '#/components/schemas/MovieIdProperty'
        rating:
          $ref: '#/components/schemas/RatingProperty'
    Actor:
      type: object
      required:
        - id
        - firstName
        - lastName
        - gender
        - createdAt
        - updatedAt
        - deletedAt
      properties:
        id:
          $ref: '#/components/schemas/ActorIdProperty'
        firstName:
          $ref: '#/components/schemas/ActorFirstNameProperty'
        lastName:
          $ref: '#/components/schemas/ActorLastNameProperty'
        gender:
          $ref: '#/components/schemas/GenderProperty'
        createdAt:
          $ref: '#/components/schemas/CreatedAtProperty'
        updatedAt:
          $ref: '#/components/schemas/UpdatedAtProperty'
        deletedAt:
          $ref: '#/components/schemas/DeletedAtProperty'
    ActorWithRating:
      allOf:
        - $ref: '#/components/schemas/Actor'
      properties:
        rating:
          type: array
          items:
            $ref: '#/components/schemas/ActorRating'
    Movie:
      type: object
      required:
        - id
        - title
        - category
        - releaseDate
        - createdAt
        - updatedAt
        - deletedAt
      properties:
        id:
          $ref: '#/components/schemas/MovieIdProperty'
        title:
          $ref: '#/components/schemas/MovieTitleProperty'
        category:
          $ref: '#/components/schemas/MovieCategoryProperty'
        releaseDate:
          $ref: '#/components/schemas/MovieReleaseDateProperty'
        createdAt:
          $ref: '#/components/schemas/CreatedAtProperty'
        updatedAt:
          $ref: '#/components/schemas/UpdatedAtProperty'
        deletedAt:
          $ref: '#/components/schemas/DeletedAtProperty'
